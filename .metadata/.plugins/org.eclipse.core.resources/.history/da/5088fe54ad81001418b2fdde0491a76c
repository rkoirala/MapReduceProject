package com.algorithm.pairs;

import java.io.IOException;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.Set;

import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reporter;
import org.apache.hadoop.mapreduce.Mapper.Context;

public class PairsMap extends Mapper<LongWritable, Text, Text, IntWritable> {

private Map<String, Integer> map = new HashMap<String, Integer>();

public void map(LongWritable key, Text value, Context context)
	throws IOException, InterruptedException {
String[] words = value.toString().split(" ");

for (int i = 0; i < words.length; i++) {
	String term = words[i];
	for (int j = i + 1; j < words.length; j++) {
		if (term.equals(words[j]))
			break;

		String keyTerm = "(" + term + "," + words[j] + ")";
		String countTerm = "(" + term + ",*" + ")";

		if (!map.containsKey(keyTerm)) {
			map.put(keyTerm, 1);
		} else {
			map.put(keyTerm, map.get(keyTerm) + 1);
		}

		if (!map.containsKey(countTerm)) {
			map.put(countTerm, 1);
		} else {
			map.put(countTerm, map.get(countTerm) + 1);
		}
	}
}
}
