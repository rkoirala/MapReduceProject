package com.algorithm.stripes;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.MapWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;

import com.algorithm.stripes.Stripes.CustomPartitioner;
import com.algorithm.stripes.Stripes.Map;
import com.algorithm.stripes.Stripes.Reduce;

public class StripesApplication
{
	public static void main(String[] args) throws Exception {
        int res = ToolRunner.run(new Configuration(), new StripesApplication(), args);
        System.exit(res);       
    }

    @Override
    public int run(String[] args) throws Exception {
        if (args.length != 2) {
            System.out.println("usage: [input] [output]");
            System.exit(-1);
        }

        JobConf conf = new JobConf(Stripes.class);

		conf.setJobName("Stripes");

		conf.setOutputKeyClass(LongWritable.class);
		conf.setOutputValueClass(MapWritable.class);

		conf.setMapperClass(StripesMapper.class);
		conf.setPartitionerClass(StripesPartitioner.class);
		conf.setReducerClass(StripesReducer.class);

		conf.setInputFormat(TextInputFormat.class);
		conf.setOutputFormat(TextOutputFormat.class);

		FileInputFormat.setInputPaths(conf, new Path(args[0]));
		FileOutputFormat.setOutputPath(conf, new Path(args[1]));

		JobClient.runJob(conf);
        return 0;
    }
}

